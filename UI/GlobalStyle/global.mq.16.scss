/*
	media query mixins

    example usage:

    .selector-to-be-affected {
        @include [MQ_NAME] {
            // styling rules to be applied once MQ is active
        }
    }

    e.g.

    // will cause any elements with the "mobile-hide" class to be hidden when viewed on a mobile device
    .mobile-hide {
        @include mq_mobile {
            display: none;
        }
    }

    // will ensure the text input fields will have a font-size of 16px when running under iOS
    input[type='text'] {
        @include mq_iOS {
            font-size: 16px !important;
        }
    }

*/


// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
) !default;

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map.keys($breakpoints)) {
  $n: string.index($breakpoint-names, $name);
  @if not $n {
    @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
  }
  @return if($n < list.length($breakpoint-names), list.nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map.get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $max: map.get($breakpoints, $name);
  @return if($max and $max > 0, $max - .02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min:  breakpoint-min($name, $breakpoints);
  $next: breakpoint-next($name, $breakpoints);
  $max:  breakpoint-max($next);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($next, $breakpoints) {
      @content;
    }
  }
}

$socialstack_media_queries: (
  mobile: (
    small: (
      from: 0px,
      to: 320px
    ),
    medium: (
      from: 321px,
      to: 411px
    ),
    large: (
      from: 412px,
      to: 752px // discounts Galaxy Tab S7 (753px)
    )
  ),
  tablet: (
    iPadMini: (
      width: 1024px,
      height: 768px
    ),
    iPad10_2: (
      width: 1080px,
      height: 810px
    ),
    iPad10_5: (
      width: 1112px,
      height: 834px
    ),
    iPad11: (
      width: 1194px,
      height: 834px
    ),
    iPad12_9: (
      width: 1366px,
      height: 1024px
    )
  )
);

// mobile mixins
$ss_mobile: map.get($socialstack_media_queries, mobile);
$ss_mobileSmall: map.get($ss_mobile, small);
$ss_mobileMedium: map.get($ss_mobile, medium);
$ss_mobileLarge: map.get($ss_mobile, large);

// mobile MQ
// covers all mobile sizes (small / medium / large)
// use mq_mobile(false) for rules which should apply when mobile devices are _not_ detected
@mixin mq_mobile($default: true) {
  $to: map.get($ss_mobileLarge, to);

  @if not ($default) {
      @media not screen and (max-width: #{$to}) and (pointer: coarse) and (orientation: portrait) {
          @media not screen and (max-height: #{$to}) and (pointer: coarse) and (orientation: landscape) {
              @content;
          }

      }

  } @else {
      @media (max-width: #{$to}) and (pointer: coarse) and (orientation: portrait),
             (max-height: #{$to}) and (pointer: coarse) and (orientation: landscape) {
        @content;
      }

  }

}

@mixin mq_mobilePortrait {
  $to: map.get($ss_mobileLarge, to);
  @media (max-width: #{$to}) and (pointer: coarse) and (orientation: portrait) {
    @content;
  }
}

@mixin mq_mobileLandscape {
  $to: map.get($ss_mobileLarge, to);
  @media (max-height: #{$to}) and (pointer: coarse) and (orientation: landscape) {
    @content;
  }
}

// mobile MQ (small)
@mixin mq_mobileSmall {
  $from: map.get($ss_mobileSmall, from);
  $to: map.get($ss_mobileSmall, to);
  @media (min-width: #{$from}) and (max-width: #{$to}) and (pointer: coarse) and (orientation: portrait),
         (min-height: #{$from}) and (max-height: #{$to}) and (pointer: coarse) and (orientation: landscape) {
    @content;
  }
}

@mixin mq_mobileSmallPortrait {
  $from: map.get($ss_mobileSmall, from);
  $to: map.get($ss_mobileSmall, to);
  @media (min-width: #{$from}) and (max-width: #{$to}) and (pointer: coarse) and (orientation: portrait) {
    @content;
  }
}

@mixin mq_mobileSmallLandscape {
  $from: map.get($ss_mobileSmall, from);
  $to: map.get($ss_mobileSmall, to);
  @media (min-height: #{$from}) and (max-height: #{$to}) and (pointer: coarse) and (orientation: landscape) {
    @content;
  }
}

// mobile MQ (medium)
@mixin mq_mobileMedium {
  $from: map.get($ss_mobileMedium, from);
  $to: map.get($ss_mobileMedium, to);
  @media (min-width: #{$from}) and (max-width: #{$to}) and (pointer: coarse) and (orientation: portrait),
         (min-height: #{$from}) and (max-height: #{$to}) and (pointer: coarse) and (orientation: landscape) {
    @content;
  }
}

@mixin mq_mobileMediumPortrait {
  $from: map.get($ss_mobileMedium, from);
  $to: map.get($ss_mobileMedium, to);
  @media (min-width: #{$from}) and (max-width: #{$to}) and (pointer: coarse) and (orientation: portrait) {
    @content;
  }
}

@mixin mq_mobileMediumLandscape {
  $from: map.get($ss_mobileMedium, from);
  $to: map.get($ss_mobileMedium, to);
  @media (min-height: #{$from}) and (max-height: #{$to}) and (pointer: coarse) and (orientation: landscape) {
    @content;
  }
}

@mixin mq_mobileMediumUp {
  $from: map.get($ss_mobileMedium, from);
  @media (min-width: #{$from}) {
    @content;
  }
}

// mobile MQ (large)
@mixin mq_mobileLarge {
  $from: map.get($ss_mobileLarge, from);
  $to: map.get($ss_mobileLarge, to);
  @media (min-width: #{$from}) and (max-width: #{$to}) and (pointer: coarse) and (orientation: portrait),
         (min-height: #{$from}) and (max-height: #{$to}) and (pointer: coarse) and (orientation: landscape) {
    @content;
  }
}

@mixin mq_mobileLargePortrait {
  $from: map.get($ss_mobileLarge, from);
  $to: map.get($ss_mobileLarge, to);
  @media (min-width: #{$from}) and (max-width: #{$to}) and (pointer: coarse) and (orientation: portrait) {
    @content;
  }
}

@mixin mq_mobileLargeLandscape {
  $from: map.get($ss_mobileLarge, from);
  $to: map.get($ss_mobileLarge, to);
  @media (min-height: #{$from}) and (max-height: #{$to}) and (pointer: coarse) and (orientation: landscape) {
    @content;
  }
}

@mixin mq_mobileLargeUp {
  $from: map.get($ss_mobileLarge, from);
  @media (min-width: #{$from}) {
    @content;
  }
}

// tablet mixins
$ss_tablet: map.get($socialstack_media_queries, tablet);
$ss_iPadMini: map.get($ss_tablet, iPadMini);
$ss_iPad10_2: map.get($ss_tablet, iPad10_2);
$ss_iPad10_5: map.get($ss_tablet, iPad10_5);
$ss_iPad11: map.get($ss_tablet, iPad11);
$ss_iPad12_9: map.get($ss_tablet, iPad12_9);

// iPad MQ (covers all variants)
@mixin mq_ipad {
  $widthMini: map.get($ss_iPadMini, width);
  $heightMini: map.get($ss_iPadMini, height);
  $width10_2: map.get($ss_iPad10_2, width);
  $height10_2: map.get($ss_iPad10_2, height);
  $width10_5: map.get($ss_iPad10_5, width);
  $height10_5: map.get($ss_iPad10_5, height);
  $width11: map.get($ss_iPad11, width);
  $height11: map.get($ss_iPad11, height);
  $width12_9: map.get($ss_iPad12_9, width);
  $height12_9: map.get($ss_iPad12_9, height);

  @media (device-width: #{$heightMini}) and (device-height: #{$widthMini}) and (orientation: portrait),
         (device-width: #{$widthMini}) and (device-height: #{$heightMini}) and (orientation: landscape),

         (device-width: #{$height10_2}) and (device-height: #{$width10_2}) and (orientation: portrait),
         (device-width: #{$width10_2}) and (device-height: #{$height10_2}) and (orientation: landscape),
    
         (device-width: #{$height10_5}) and (device-height: #{$width10_5}) and (orientation: portrait),
         (device-width: #{$width10_5}) and (device-height: #{$height10_5}) and (orientation: landscape),
    
         (device-width: #{$height11}) and (device-height: #{$width11}) and (orientation: portrait),
         (device-width: #{$width11}) and (device-height: #{$height11}) and (orientation: landscape),

         (device-width: #{$height12_9}) and (device-height: #{$width12_9}) and (orientation: portrait),
         (device-width: #{$width12_9}) and (device-height: #{$height12_9}) and (orientation: landscape) {
    @content;
  }
}

@mixin mq_iPad {
  $widthMini: map.get($ss_iPadMini, width);
  $heightMini: map.get($ss_iPadMini, height);
  $width10_2: map.get($ss_iPad10_2, width);
  $height10_2: map.get($ss_iPad10_2, height);
  $width10_5: map.get($ss_iPad10_5, width);
  $height10_5: map.get($ss_iPad10_5, height);
  $width11: map.get($ss_iPad11, width);
  $height11: map.get($ss_iPad11, height);
  $width12_9: map.get($ss_iPad12_9, width);
  $height12_9: map.get($ss_iPad12_9, height);

  @media (device-width: #{$heightMini}) and (device-height: #{$widthMini}) and (orientation: portrait),
         (device-width: #{$widthMini}) and (device-height: #{$heightMini}) and (orientation: landscape),

         (device-width: #{$height10_2}) and (device-height: #{$width10_2}) and (orientation: portrait),
         (device-width: #{$width10_2}) and (device-height: #{$height10_2}) and (orientation: landscape),
    
         (device-width: #{$height10_5}) and (device-height: #{$width10_5}) and (orientation: portrait),
         (device-width: #{$width10_5}) and (device-height: #{$height10_5}) and (orientation: landscape),
    
         (device-width: #{$height11}) and (device-height: #{$width11}) and (orientation: portrait),
         (device-width: #{$width11}) and (device-height: #{$height11}) and (orientation: landscape),

         (device-width: #{$height12_9}) and (device-height: #{$width12_9}) and (orientation: portrait),
         (device-width: #{$width12_9}) and (device-height: #{$height12_9}) and (orientation: landscape) {
    @content;
  }
}

@mixin mq_iPadPortrait {
  $widthMini: map.get($ss_iPadMini, width);
  $heightMini: map.get($ss_iPadMini, height);
  $width10_2: map.get($ss_iPad10_2, width);
  $height10_2: map.get($ss_iPad10_2, height);
  $width10_5: map.get($ss_iPad10_5, width);
  $height10_5: map.get($ss_iPad10_5, height);
  $width11: map.get($ss_iPad11, width);
  $height11: map.get($ss_iPad11, height);
  $width12_9: map.get($ss_iPad12_9, width);
  $height12_9: map.get($ss_iPad12_9, height);

  @media (device-width: #{$heightMini}) and (device-height: #{$widthMini}) and (orientation: portrait),
         (device-width: #{$height10_2}) and (device-height: #{$width10_2}) and (orientation: portrait),
         (device-width: #{$height10_5}) and (device-height: #{$width10_5}) and (orientation: portrait),
         (device-width: #{$height11}) and (device-height: #{$width11}) and (orientation: portrait),
         (device-width: #{$height12_9}) and (device-height: #{$width12_9}) and (orientation: portrait) {
    @content;
  }
}

@mixin mq_iPadLandscape {
  $widthMini: map.get($ss_iPadMini, width);
  $heightMini: map.get($ss_iPadMini, height);
  $width10_2: map.get($ss_iPad10_2, width);
  $height10_2: map.get($ss_iPad10_2, height);
  $width10_5: map.get($ss_iPad10_5, width);
  $height10_5: map.get($ss_iPad10_5, height);
  $width11: map.get($ss_iPad11, width);
  $height11: map.get($ss_iPad11, height);
  $width12_9: map.get($ss_iPad12_9, width);
  $height12_9: map.get($ss_iPad12_9, height);

  @media (device-width: #{$widthMini}) and (device-height: #{$heightMini}) and (orientation: landscape),
         (device-width: #{$width10_2}) and (device-height: #{$height10_2}) and (orientation: landscape),
         (device-width: #{$width10_5}) and (device-height: #{$height10_5}) and (orientation: landscape),
         (device-width: #{$width11}) and (device-height: #{$height11}) and (orientation: landscape),
         (device-width: #{$width12_9}) and (device-height: #{$height12_9}) and (orientation: landscape) {
    @content;
  }
}

// iPad MQ (mini)
@mixin mq_iPadMini {
  $width: map.get($ss_iPadMini, width);
  $height: map.get($ss_iPadMini, height);
  @media (device-width: #{$height}) and (device-height: #{$width}) and (orientation: portrait),
         (device-width: #{$width}) and (device-height: #{$height}) and (orientation: landscape) {
    @content;
  }
}

@mixin mq_iPadMiniPortrait {
  $width: map.get($ss_iPadMini, width);
  $height: map.get($ss_iPadMini, height);
  @media (device-width: #{$height}) and (device-height: #{$width}) and (orientation: portrait) {
    @content;
  }
}

@mixin mq_iPadMiniLandscape {
  $width: map.get($ss_iPadMini, width);
  $height: map.get($ss_iPadMini, height);
  @media (device-width: #{$width}) and (device-height: #{$height}) and (orientation: landscape) {
    @content;
  }
}

// iPad MQ (10.2")
@mixin mq_iPad10_2 {
  $width: map.get($ss_iPad10_2, width);
  $height: map.get($ss_iPad10_2, height);
  @media (device-width: #{$height}) and (device-height: #{$width}) and (orientation: portrait),
         (device-width: #{$width}) and (device-height: #{$height}) and (orientation: landscape) {
    @content;
  }
}

@mixin mq_iPad10_2Portrait {
  $width: map.get($ss_iPad10_2, width);
  $height: map.get($ss_iPad10_2, height);
  @media (device-width: #{$height}) and (device-height: #{$width}) and (orientation: portrait) {
    @content;
  }
}

@mixin mq_iPad10_2Landscape {
  $width: map.get($ss_iPad10_2, width);
  $height: map.get($ss_iPad10_2, height);
  @media (device-width: #{$width}) and (device-height: #{$height}) and (orientation: landscape) {
    @content;
  }
}

// iPad MQ (10.5")
@mixin mq_iPad10_5 {
  $width: map.get($ss_iPad10_5, width);
  $height: map.get($ss_iPad10_5, height);
  @media (device-width: #{$height}) and (device-height: #{$width}) and (orientation: portrait),
         (device-width: #{$width}) and (device-height: #{$height}) and (orientation: landscape) {
    @content;
  }
}

@mixin mq_iPad10_5Portrait {
  $width: map.get($ss_iPad10_5, width);
  $height: map.get($ss_iPad10_5, height);
  @media (device-width: #{$height}) and (device-height: #{$width}) and (orientation: portrait) {
    @content;
  }
}

@mixin mq_iPad10_5Landscape {
  $width: map.get($ss_iPad10_5, width);
  $height: map.get($ss_iPad10_5, height);
  @media (device-width: #{$width}) and (device-height: #{$height}) and (orientation: landscape) {
    @content;
  }
}

// iPad MQ (11")
@mixin mq_iPad11 {
  $width: map.get($ss_iPad11, width);
  $height: map.get($ss_iPad11, height);
  @media (device-width: #{$height}) and (device-height: #{$width}) and (orientation: portrait),
         (device-width: #{$width}) and (device-height: #{$height}) and (orientation: landscape) {
    @content;
  }
}

@mixin mq_iPad11Portrait {
  $width: map.get($ss_iPad11, width);
  $height: map.get($ss_iPad11, height);
  @media (device-width: #{$height}) and (device-height: #{$width}) and (orientation: portrait) {
    @content;
  }
}

@mixin mq_iPad11Landscape {
  $width: map.get($ss_iPad11, width);
  $height: map.get($ss_iPad11, height);
  @media (device-width: #{$width}) and (device-height: #{$height}) and (orientation: landscape) {
    @content;
  }
}

// iPad MQ (12.9")
@mixin mq_iPad12_9 {
  $width: map.get($ss_iPad12_9, width);
  $height: map.get($ss_iPad12_9, height);
  @media (device-width: #{$height}) and (device-height: #{$width}) and (orientation: portrait),
         (device-width: #{$width}) and (device-height: #{$height}) and (orientation: landscape) {
    @content;
  }
}

@mixin mq_iPad12_9Portrait {
  $width: map.get($ss_iPad12_9, width);
  $height: map.get($ss_iPad12_9, height);
  @media (device-width: #{$height}) and (device-height: #{$width}) and (orientation: portrait) {
    @content;
  }
}

@mixin mq_iPad12_9Landscape {
  $width: map.get($ss_iPad12_9, width);
  $height: map.get($ss_iPad12_9, height);
  @media (device-width: #{$width}) and (device-height: #{$height}) and (orientation: landscape) {
    @content;
  }
}

// desktop mixin
// (desktop is considered anything larger than the largest mobile width, coupled with an accurate pointing device)
@mixin mq_desktop {
  $desktopFrom: map.get($ss_mobileLarge, to) + 1;

  // mobile / tablet should be discounted due to use of 'pointer: fine';
  // -ms-high-contrast used to include IE10 (doesn't support 'pointer')
  @media (min-width: #{$desktopFrom}) and (pointer: fine),    
         (-ms-high-contrast: active),
         (-ms-high-contrast: none) {
    @content;
  }
}

// IE10/11 mixin
@mixin mq_IE10Plus {
  @media (-ms-high-contrast: active), (-ms-high-contrast: none) {
    @content;
  }
}

// mozilla only
@mixin mq_mozilla {
  @-moz-document url-prefix() {
    @content;
  }
}
@mixin mq_firefox {
  @-moz-document url-prefix() {
    @content;
  }
}

// safari only
@mixin mq_safari {
    
    @media not all and (min-resolution:.001dpcm) {
        
        @supports (-webkit-appearance:none) {
            @content;
        }
    }
}

// iOS only
@mixin mq_ios {
  @supports (-webkit-touch-callout: none) {
    @content;
  }
}
@mixin mq_iOS {
  @supports (-webkit-touch-callout: none) {
    @content;
  }
}

// touch only
@mixin mq_touch {
  @media (pointer: coarse) {
    @content;
  }
}
