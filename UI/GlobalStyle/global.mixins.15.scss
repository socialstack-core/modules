/*
	global mixins
    NB: named global-mixins.15.scss to allow for project-specific overrides to these mixins (see UI/Source/GeneralStyle/mixins.20.scss)
*/

// renamed to prevent clash with Bootstrap font-size mixin
@mixin fr-font-size($px) {
    font-size: px_to_rem($px);
}

@mixin line_height($px) {
    line-height: px_to_rem($px);
}

@mixin letter_spacing($px) {
    letter-spacing: px_to_rem($px);
}

@mixin border_radius($px) {
    border-radius: px_to_rem($px);
}

@mixin border_radius($topleft_px: 0, $topright_px: $topleft_px, $bottomright_px: $topleft_px, $bottomleft_px: $topleft_px) {
    $topleft_em: px_to_rem($topleft_px);
    $topright_em: px_to_rem($topright_px);
    $bottomright_em: px_to_rem($bottomright_px);
    $bottomleft_em: px_to_rem($bottomleft_px);
    border-radius: $topleft_em $topright_em $bottomright_em $bottomleft_em;
}

@mixin padding($top_px: 0, $right_px: 0, $bottom_px: $top_px, $left_px: $right_px) {
    $top_em: px_to_rem($top_px);
    $right_em: px_to_rem($right_px);
    $bottom_em: px_to_rem($bottom_px);
    $left_em: px_to_rem($left_px);
    padding: $top_em $right_em $bottom_em $left_em;
}

@mixin margin($top_px: 0, $right_px: 0, $bottom_px: $top_px, $left_px: $right_px) {
    $top_em: px_to_rem($top_px);
    $right_em: px_to_rem($right_px);
    $bottom_em: px_to_rem($bottom_px);
    $left_em: px_to_rem($left_px);
    margin: $top_em $right_em $bottom_em $left_em;
}

// clamp support wasn't introduced into Safari until v13.1 (v13.4 for iOS);
// this provides fallback using nested min/max
//
// example usage:
//.foo {
//    @include clamp_ex(font-size, 10px, 2.5vw, 48px);
//}
@mixin clamp_ex($property, $min, $val, $max) {
    #{$property}: clamp(#{$min}, #{$val}, #{$max});
    
    @supports not (#{$property}: clamp(#{$min}, #{$val}, #{$max})) {
        #{$property}: max(min(#{$val}, #{$max}), #{$min});
    }
    
}

// typically used in the following context:
// <div className="wrapper">
//    <i className="fr fr-star"></i>
//    <span>Label text</span>
// </div>
// where .wrapper is a display: flex; align-items: center
// apply this to the icon (covers various FontAwesome / FourRoads classes) to size / space appropriately
@mixin icon_style($font_size: 1em, $margin_right: .5em) {
    .fa, .fas, .far, .fal, .fad, .fab, .fr {
        font-size: $font_size;
        margin-right: $margin_right;
    }
}

// used with <ul> elements to remove default bullet styling / padding
@mixin basic_list {
    list-style: none;
    padding-left: 0;
}

@mixin focus_styling {
    // mimics Chrome black outline
    // (box shadow used to apply white outer border for elements on a dark background)
    //transition: outline 1ms, box-shadow 1ms;
    //outline: 2px solid #000;
    //box-shadow: 0 0 0 3px #fff;

    // alternate version
    outline: 1px dotted #000;
    outline: -webkit-focus-ring-color auto 5px;
}

$grid_breakpoints: (
	xs: 0,
	sm: 576px,
	md: 768px,
	lg: 992px,
	xl: 1200px
);

@function breakpoint-next($name, $breakpoints: $grid_breakpoints, $breakpoint-names: map.keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n != null and $n < list.length($breakpoint-names), list.nth($breakpoint-names, $n + 1), null);
}

@function breakpoint-min($name, $breakpoints: $grid_breakpoints) {
  $min: map.get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid_breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);
}

@function breakpoint-infix($name, $breakpoints: $grid_breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

@mixin media-breakpoint-up($name, $breakpoints: $grid_breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin media-breakpoint-down($name, $breakpoints: $grid_breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    
    @if $max {
        @media (max-width: $max) {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid_breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

@mixin media-breakpoint-only($name, $breakpoints: $grid_breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

// breakpoints used by data-clamp-xs / -sm / -md / -lg / -xl variants
$data_clamp_breakpoints: (
  "xs": 575px,
  "sm": 576px,
  "md": 768px,
  "lg": 992px,
  "xl": 1200px
);

// max value supported by [data-clamp]
$data_clamp_max: 6;

// enforces single line clamping
@mixin singleLineClamping(){
    white-space: nowrap;
    display: block;
}

// enforces multiple line clamping
@mixin multipleLineClamping($attribute, $maxLines){

  [#{$attribute}="#{$maxLines}"] 
  {
    line-clamp: $maxLines;
    -webkit-line-clamp: $maxLines;
  }
}

// restores line wrapping (used when overriding line clamping at various breakpoints)
@mixin restoreLineWrapping(){
    display: block;
    -webkit-box-orient: inline-axis;
    text-overflow: clip;
    overflow: visible;
	white-space: normal;
	
	&[data-clamp-display="inline-block"] {
		display: inline-block;		
	}

	&[data-clamp-display="inline-flex"] {
		display: inline-flex;		
	}

	&[data-clamp-display="flex"] {
		display: flex;		
	}
}

// initial (xs) breakpoint uses a max-width @media query
// (everything else uses min-width)
@function getBreakpointType($breakpoint) {
  @if ($breakpoint == 'xs') {
    @return max-width;
  }
  
  @return min-width;
}

// define line clamping for a specific breakpoint
@mixin lineClampingBreakpoint($breakpoint, $width) {
  $breakpoint_type: getBreakpointType($breakpoint);

  @media only screen and (#{$breakpoint_type}: $width) {
  
  	[data-clamp-#{$breakpoint}="0"] {
  		@include restoreLineWrapping();
  	}

  	[data-clamp-#{$breakpoint}="1"] {
  		@include singleLineClamping();
  	}
  
  	@for $i from 2 through $data_clamp_max {
  	  @include multipleLineClamping("data-clamp-#{$breakpoint}", $i);
  	}
  }
}

// scale given property between given sizes / breakpoints
// example usage:
// @include ss_scale(font-size, (600: 16, 768: 22, 1024: 30, 1280: 75));
//
// sets font-size as follows:
// <= 600px: 16px
// > 600px <= 768px: scale smoothly between 16px > 22px
// > 768px <= 1024px: scale smoothly between 22px > 30px
// > 1024px <= 1280px: scale smoothly between 30p > 75px
// > 1280px: 75px
//
// ideally we could use min() / max() or even clamp(), but IE .... o.O

// TODO: consider supporting em / rem units (to optionally account for different base font size set in user's browser)
// use $line_height to define preferred line height for this item when scaling
@mixin ss_scale($property, $values, $line_height: 1.4) {
    $previousBreakpoint: null;
    $previousValue: null;
    $shorthandMap: (
        'ipad': 1024,
        'ipad-landscape': 1024,
        'ipad-mini': 1024,
        'ipad-mini-landscape': 1024,
        'xga': 1024,
        'ipad-portrait': 768,
        'ipad-mini-portrait': 768,

        // NB: iPad pro to test - x1.5?
        'ipad-pro': 1366,
        'ipad-pro-landscape': 1366,
        'ipad-pro-12-9-landscape': 1366,
        'ipad-pro-11': 1194,
        'ipad-pro-11-landscape': 1194,
        'ipad-pro-10-5': 1112,
        'ipad-pro-10-5-landscape': 1112,
        'ipad-pro-10-2': 1080,
        'ipad-pro-10-2-landscape': 1080,
        'ipad-pro-11-portrait': 834,
        'ipad-pro-10-5-portrait': 834,
        'ipad-pro-10-2-portrait': 810,
        'laptop': 1366,                 // 1366x768
        'wxga': 1366,                   // 1366x768
        'sxga': 1280,                   // 1280x1024
        'macbook': 2304,                // 2304x1440 x2
        'macbook-pro-13-3': 2560 / 2,   // 2560x1600 x2
        'macbook-pro-15': 2880 / 2,     // 2880x1800 x2
        'macbook-pro-16': 3072 / 2,     // 3072x1920 x2
        'imac-21-5': 4096 / 2,          // 4096x2394 x2
        'imac-27': 5120 / 2             // 5120x2880 x2
    );
    $breakpointList: ();

    // iterate through list and update shorthand breakpoint terms
    @each $breakpoint, $value in $values {
        $resolved: map.get($shorthandMap, $breakpoint);

        @if ($resolved) {
            $breakpoint: $resolved;
        }

        $breakpointList: map.merge($breakpointList, ($breakpoint: $value));
    }

    // ensure list is in breakpoint order    
    $breakpointList: map-sort-keys($breakpointList);

    // now loop through and generate font locks for each breakpoint
    @each $breakpoint, $value in $breakpointList {
        $index: index(($values), ($breakpoint $value)) - 1;
        
        @if ($index == 0) {
            // set initial property
            #{$property}: $value + 0px;

            // if we're scaling font-size, update line-height appropriately
            @if ($property == 'font-size') {
                line-height: get_line_height($value);
            }

        } @else {
            $minWidth: $previousBreakpoint + 1;
            $valueDiff: $value - $previousValue;
            $breakpointDiff: $breakpoint - $previousBreakpoint;
              
            // set scaled value
            @media only screen and (min-width: $minWidth + 0px) {
                #{$property}: calc(#{$previousValue + 0px} + #{$valueDiff} * ((100vmax - #{$previousBreakpoint + 0px}) / #{$breakpointDiff}));

                // if we're scaling font-size, update line-height appropriately
                @if ($property == 'font-size') {
                    line-height: $line_height;
                    $slope: (1.06 - 1.5) / (240 - 16); // 1.06 @ 240px / 1.5 @ 16px
                    $initial: 1.5 - $slope * 16;
                    /*
                    //line-height: calc(#{$previousValue + 0px} + #{$valueDiff} * ((100vmax - #{$previousBreakpoint + 0px}) / #{$breakpointDiff}) * 1.06);
                    //line-height: calc((#{$previousValue + 0px} + #{$valueDiff} * ((100vmax - #{$previousBreakpoint + 0px}) / #{$breakpointDiff}) * #{$slope}) + #{$initial + 0px});
                    //line-height: calc((#{$previousValue + 0px} + #{$valueDiff} * ((100vmax - #{$previousBreakpoint + 0px}) / #{$breakpointDiff})) * 1.616);

                    line-height: clamp(
                        calc((#{$previousValue + 0px} + #{$valueDiff} * ((100vmax - #{$previousBreakpoint + 0px}) / #{$breakpointDiff})) * 1.06), 
                        calc(((#{$previousValue + 0px} + #{$valueDiff} * ((100vmax - #{$previousBreakpoint + 0px}) / #{$breakpointDiff})) * #{$slope}) + #{$initial + 0px}),
                        calc((#{$previousValue + 0px} + #{$valueDiff} * ((100vmax - #{$previousBreakpoint + 0px}) / #{$breakpointDiff})) * 1.616));
                    */
                }

            }
              
            @if ($index + 1 == list.length($values)) {
                  
                // set a maximum size at the last breakpoint
                @media only screen and (min-width: $breakpoint + 0px) {
                    #{$property}: $value + 0px;

                    // if we're scaling font-size, update line-height appropriately
                    @if ($property == 'font-size') {
                        line-height: get_line_height($value);
                    }

                }
                  
            }

        }
          
        $previousBreakpoint: $breakpoint;
        $previousValue: $value;
    }
  
}

@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  }

  @return $value;
}